name: Build 

on:
  push:
    branches: [ "release-pipeline" ]

jobs:
  build:
    # Build on Linux, Windows and MacOS
    strategy:
      matrix:
        #os: [ubuntu-latest, windows-latest, macos-latest]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Set git to use LF
        if: matrix.os == 'windows-latest'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@1.65.0

      - name: setup msys2 for windows
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: mingw-w64-x86_64-toolchain mingw-w64-x86_64-sqlite3 gcc make base-devel
          msystem: mingw64
          path-type: inherit

      - name: configure with Wasm (windows)
        if: matrix.os == 'windows-latest'
        run: |
          export CARGO_BIN="$(which cargo)"
          ./configure --enable-releasemode --enable-wasm-runtime
          make sqlite3.c
          gcc -shared -DWIN64 -DNDEBUG -D_WINDOWS -D_USRDLL -DNO_TCL -D_CRT_SECURE_NO_DEPRECATE -DTHREADSAFE=1 -DTEMP_STORE=1 -DSQLITE_MAX_EXPR_DEPTH=0 -m64 -I. sqlite3.c shell.c -o liblibsql_wasm.dll -Wl,--out-implib,liblibsql_wasm.a
          ls -lah
        shell: msys2 {0}

      - name: Zip artifact for deployment (windows)
        if: matrix.os == 'windows-latest'
        run: Compress-Archive -Path liblibsql_wasm.a,liblibsql_wasm.dll libsql-wasm-${{ matrix.os }}.zip
  
      - name: configure with Wasm (linux/macos)
        if: matrix.os != 'windows-latest'
        run: |
          ./configure --enable-releasemode --enable-wasm-runtime && make libsqlite3.la
  
      - name: Zip artifact for deployment (linux/macos)
        if: matrix.os != 'windows-latest'
        run: zip libsql-wasm-${{ matrix.os }}.zip liblibsql_wasm.a 

      - uses: actions/upload-artifact@v3
        with:
          name: libsql-wasm-${{ matrix.os }}
          path: libsql-wasm-${{ matrix.os }}.zip
          retention-days: 1

  release:
    name: "Release"
    needs: build
    runs-on: ubuntu-latest
    steps:
      # We don't need the repo, grab all artifacts from the build stage
      # The plugin puts each artifact in a folder of `artifactname`
      - uses: actions/download-artifact@v3

      - name: Display fetched artifacts
        run: ls -Rha
        
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          token: "${{ secrets.GH_TOKEN }}"
          #body_path: RELEASE_NOTES.txt
          prerelease: true
          tag_name: "WASM-libs-${{ github.ref_name }}"
          generate_release_notes: true
          fail_on_unmatched_files: false
          files: |
            libsql-wasm-windows-latest/*
            libsql-wasm-macos-latest/*
            libsql-wasm-ubuntu-latest/*

